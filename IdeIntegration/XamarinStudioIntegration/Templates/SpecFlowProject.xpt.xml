<?xml version="1.0"?>
<Template originator   = "Mike Jones">
    
    <!-- Template Header -->
    <TemplateConfiguration>
        <_Name>SpecFlow Nunit Library Project</_Name>
        <_Category>SpecFlow</_Category>
        <Icon>md-project|res:SpecFlowProjectIcon.ico</Icon>
        <_Description>Creates an SpecFlow library</_Description>
        <LanguageName>C#</LanguageName>
        <DefaultFilename>SpecFlowProject</DefaultFilename>
    </TemplateConfiguration>
    
    <!-- Actions -->
    <Actions>
        <Open filename = "Step1.cs"/>
    </Actions>
    
    <!-- Template Content -->
    <Combine name = "${ProjectName}" directory = ".">
        <Options>
            <StartupProject>${ProjectName}</StartupProject>
        </Options>
        
        <Project name = "${ProjectName}" directory = ".">
            <Options Target = "Library" />
            
            <References>
                <Reference type="Package" refto="System, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
            </References>

            <Packages>
                <Package ID="SpecFlow.NUnit" Version="1.1.1" />
            </Packages>

            <Files>
                <File name="Step1.cs">
<![CDATA[using System;

using TechTalk.SpecFlow;

namespace ${Namespace}
{
    [Binding]
    public class ${Name}
    {
        [Given("I have entered (.*) into the calculator")]
        public void GivenIHaveEnteredSomethingIntoTheCalculator(int number)
        {
            // TODO: implement arrange (recondition) logic
            // For storing and retrieving scenario-specific data, 
            // the instance fields of the class or the
            //     ScenarioContext.Current
            // collection can be used.
            // To use the multiline text or the table argument of the scenario,
            // additional string/Table parameters can be defined on the step definition
            // method. 

            ScenarioContext.Current.Pending();
        }

        [When("I press add")]
        public void WhenIPressAdd()
        {
            // TODO: implement act (action) logic

            ScenarioContext.Current.Pending();
        }

        [Then("the result should be (.*) on the screen")]
        public void ThenTheResultShouldBe(int result)
        {
            // TODO: implement assert (verification) logic
          
            ScenarioContext.Current.Pending();
        }
    }
}
        ]]>
                </File>

            </Files>
        </Project>
    </Combine>
</Template>
