// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TechTalk.SpecFlow.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Scoping step definitions")]
    public partial class ScopingStepDefinitionsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ScopedSteps.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Scoping step definitions", @"As a developer
I would like to be able to scope the step definitions (bindings) on method and class level
So that I can implement test logic differently depending on the usage context

Attribute usage:

[Scope(Tag = ""mytag"", Feature = ""feature title"", Scenario = ""scenario title"")] 

Future ideas:
* scope for previous steps ([StepContext(Step = ""my previous step for doing something"")])
* use regex in scopes ([StepContext(Scenario = ""(my )?scenario title"")])", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Scoping step definitions to tags")]
        public virtual void ScopingStepDefinitionsToTags()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Scoping step definitions to tags", ((string[])(null)));
#line 14
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 15
 testRunner.Given("there is a feature file in the project as", "Feature: Simple Feature\r\n\r\n@mytag\r\nScenario: Simple Scenario\r\nWhen I do something" +
                    "", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 23
 testRunner.And("the following step definitions", "[When(\"I do something\"), Scope(Tag = \"mytag\")]\r\npublic void WhenIDoSomethingWithM" +
                    "yTag()\r\n{}\r\n\r\n[When(\"I do something\"), Scope(Tag = \"othertag\")]\r\npublic void Whe" +
                    "nIDoSomethingWithOtherTag()\r\n{}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 33
 testRunner.When("I execute the tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 34
 testRunner.Then("the binding method \'WhenIDoSomethingWithMyTag\' is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Scoping step definitions to features")]
        public virtual void ScopingStepDefinitionsToFeatures()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Scoping step definitions to features", ((string[])(null)));
#line 36
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 37
 testRunner.Given("there is a feature file in the project as", "Feature: Simple Feature\r\nScenario: Simple Scenario\r\nWhen I do something", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 43
 testRunner.And("the following step definitions", "[When(\"I do something\"), Scope(Feature = \"Simple Feature\")]\r\npublic void WhenIDoS" +
                    "omethingInSimpleFeature()\r\n{}\r\n\r\n[When(\"I do something\"), Scope(Feature = \"Other" +
                    " Feature\")]\r\npublic void WhenIDoSomethingInOtherFeature()\r\n{}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 53
 testRunner.When("I execute the tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 54
 testRunner.Then("the binding method \'WhenIDoSomethingInSimpleFeature\' is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Scoping step definitions to scenarios")]
        public virtual void ScopingStepDefinitionsToScenarios()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Scoping step definitions to scenarios", ((string[])(null)));
#line 57
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 58
 testRunner.Given("there is a feature file in the project as", "Feature: Simple Feature\r\n\r\nScenario: Simple Scenario\r\nWhen I do something", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 65
 testRunner.And("the following step definitions", "[When(\"I do something\"), Scope(Scenario = \"Simple Scenario\")]\r\npublic void WhenID" +
                    "oSomethingInSimpleScenario()\r\n{}\r\n\r\n[When(\"I do something\"), Scope(Scenario = \"O" +
                    "ther Scenario\")]\r\npublic void WhenIDoSomethingInOtherScenario()\r\n{}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 75
 testRunner.When("I execute the tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 76
 testRunner.Then("the binding method \'WhenIDoSomethingInSimpleScenario\' is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Scopes can be conbined with AND")]
        public virtual void ScopesCanBeConbinedWithAND()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Scopes can be conbined with AND", ((string[])(null)));
#line 78
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 79
 testRunner.Given("there is a feature file in the project as", "Feature: Simple Feature\r\n@mytag\r\nScenario: Simple Scenario\r\nWhen I do something", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 86
 testRunner.And("the following step definition", "[When(\"I do something\"), Scope(Feature = \"Simple Feature\", Tag = \"mytag\")]\r\npubli" +
                    "c void WhenIDoSomethingInSimpleFeatureAndMyTag()\r\n{}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 92
 testRunner.When("I execute the tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 93
 testRunner.Then("the binding method \'WhenIDoSomethingInSimpleFeatureAndMyTag\' is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Scopes can be conbined with OR")]
        public virtual void ScopesCanBeConbinedWithOR()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Scopes can be conbined with OR", ((string[])(null)));
#line 95
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 96
 testRunner.Given("there is a feature file in the project as", "Feature: Simple Feature\r\n@mytag\r\nScenario: Simple Scenario\r\nWhen I do something\r\n" +
                    "\r\nScenario: Other Scenario\r\nWhen I do something", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 106
 testRunner.And("the following step definition", "[When(\"I do something\"), Scope(Scenario = \"Other Scenario\"), Scope(Tag = \"mytag\")" +
                    "]\r\npublic void WhenIDoSomethingInOtherScenarioOrMyTag()\r\n{}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 112
 testRunner.When("I execute the tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 113
 testRunner.Then("the binding method \'WhenIDoSomethingInOtherScenarioOrMyTag\' is executed twice", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Scoped matches have higher precedency")]
        public virtual void ScopedMatchesHaveHigherPrecedency()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Scoped matches have higher precedency", ((string[])(null)));
#line 115
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 117
 testRunner.Given("there is a feature file in the project as", "Feature: Simple Feature\r\n\r\n@mytag\r\nScenario: Simple Scenario\r\nWhen I do something" +
                    "", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 125
 testRunner.And("the following step definitions", "[When(\"I do something\"), Scope(Tag = \"mytag\")]\r\npublic void WhenIDoSomethingWithM" +
                    "yTag()\r\n{}\r\n\r\n[When(\"I do something\")]\r\npublic void WhenIDoSomethingNonScoped()\r" +
                    "\n{}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 135
 testRunner.When("I execute the tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 136
 testRunner.Then("the binding method \'WhenIDoSomethingWithMyTag\' is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Scoping step definitions of a binding class")]
        public virtual void ScopingStepDefinitionsOfABindingClass()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Scoping step definitions of a binding class", ((string[])(null)));
#line 138
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 140
 testRunner.Given("there is a feature file in the project as", "Feature: Simple Feature\r\n\r\n@mytag\r\nScenario: Simple Scenario\r\nWhen I do something" +
                    "", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 148
 testRunner.And("the following binding class", "[Binding, Scope(Tag = \"mytag\")]\r\npublic class ScopedSteps\r\n{\r\n[When(\"I do somethi" +
                    "ng\")]\r\npublic void WhenIDoSomethingWithMyTag()\r\n{}\r\n}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 158
 testRunner.When("I execute the tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 159
 testRunner.Then("the binding method \'WhenIDoSomethingWithMyTag\' is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("No ambiguouity if the same method matches with multiple scopes")]
        public virtual void NoAmbiguouityIfTheSameMethodMatchesWithMultipleScopes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("No ambiguouity if the same method matches with multiple scopes", ((string[])(null)));
#line 162
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 163
 testRunner.Given("there is a feature file in the project as", "Feature: Simple Feature\r\n@mytag\r\nScenario: Simple Scenario\r\nWhen I do something", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 170
 testRunner.And("the following step definition", "[When(\"I do something\"), Scope(Scenario = \"Simple Scenario\"), Scope(Tag = \"mytag\"" +
                    ")]\r\npublic void WhenIDoSomethingInOtherScenarioOrMyTag()\r\n{}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 176
 testRunner.When("I execute the tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 177
 testRunner.Then("the binding method \'WhenIDoSomethingInOtherScenarioOrMyTag\' is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("More scope matches have higher precedency")]
        public virtual void MoreScopeMatchesHaveHigherPrecedency()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("More scope matches have higher precedency", ((string[])(null)));
#line 179
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 181
 testRunner.Given("there is a feature file in the project as", "Feature: Simple Feature\r\n@mytag\r\nScenario: Simple Scenario\r\nWhen I do something", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 188
 testRunner.And("the following step definition", "[When(\"I do something\"), Scope(Feature = \"Simple Feature\", Tag = \"mytag\")]\r\npubli" +
                    "c void WhenIDoSomethingInSimpleFeatureAndMyTag()\r\n{}\r\n[When(\"I do something\"), S" +
                    "cope(Tag = \"mytag\")]\r\npublic void WhenIDoSomethingWithMyTag()\r\n{}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 197
 testRunner.When("I execute the tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 198
 testRunner.Then("the binding method \'WhenIDoSomethingInSimpleFeatureAndMyTag\' is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
